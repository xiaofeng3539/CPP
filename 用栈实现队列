#include <iostream>
#include <stdexcept>
using namespace std;

template<typename T>
class Stack {
private:
    T* data;
    int size;
    int capacity;
public:
    Stack() : data(nullptr), size(0), capacity(10) { data = new T[capacity]; }
    ~Stack();
    void push(T element);
    T pop();
    T top() const;
    int getSize() const;
    void resize();
    bool empty() const;
};

template<typename T>
void Stack<T>::resize() {
    int newcapacity = capacity * 2;
    T* newData = new T[newcapacity];
    for (int i = 0; i < size; i++) {
        newData[i] = data[i];
    }
    delete[] data;
    data = newData;
    capacity = newcapacity; // 同步更新容量
}

template<typename T>
Stack<T>::~Stack() {
    delete[] data;
}

template<typename T>
void Stack<T>::push(T element) {
    if (size == capacity) {
        resize();
    }
    data[size++] = element;
}

template<typename T>
T Stack<T>::pop() {
    if (size == 0) {
        throw std::underflow_error("Stack is empty");
    }
    return data[--size];
}

template<typename T>
T Stack<T>::top() const {
    if (size == 0) {
        throw std::underflow_error("Stack is empty");
    }
    return data[size - 1];
}

template<typename T>
int Stack<T>::getSize() const {
    return size;
}

template<typename T>
bool Stack<T>::empty() const {
    return size==0;
}

class Myqueue {
private:
    Stack<int> s1, s2;
public:
    Myqueue(){}

    void push(int x) {
        s1.push(x);
    }

    int pop() {
        if (s2.empty()) {
            while (!s1.empty()) {
                s2.push(s1.pop());
            }
        }
        return s2.pop();
    }

    int peek() {
        if (s2.empty()) {
            while (!s1.empty()) {
                s2.push(s1.pop());
            }
        }
        return s2.top();
    }

    bool empty() {
        return s1.empty() && s2.empty();
    }
};


int main() {
  Myqueue q;

    // 测试1：初始队列是否为空
    cout << "测试1：初始队列是否为空" << endl;
    cout << "预期结果：1（空），实际结果：" << q.empty() << endl << endl;

    // 测试2：入队操作
    cout << "测试2：入队操作" << endl;
    q.push(10);
    q.push(20);
    q.push(30);
    cout << "入队元素：10, 20, 30" << endl;
    cout << "当前队列是否为空：" << q.empty() << "（预期：0）" << endl << endl;

    // 测试3：查看队首元素
    cout << "测试3：查看队首元素" << endl;
    cout << "预期队首：10，实际队首：" << q.peek() << endl << endl;

    // 测试4：出队操作
    cout << "测试4：出队操作" << endl;
    cout << "出队元素：" << q.pop() << "（预期：10）" << endl;
    cout << "出队后队首：" << q.peek() << "（预期：20）" << endl << endl;

    // 测试5：连续出队
    cout << "测试5：连续出队" << endl;
    cout << "出队元素：" << q.pop() << "（预期：20）" << endl;
    cout << "出队元素：" << q.pop() << "（预期：30）" << endl;
    cout << "所有元素出队后是否为空：" << q.empty() << "（预期：1）" << endl << endl;

    // 测试6：边界测试（空队列操作）
    cout << "测试6：边界测试（空队列操作）" << endl;
    try {
        cout << "尝试从空队列出队：";
        q.pop();
    } catch (const std::underflow_error& e) {
        cout << "捕获异常：" << e.what() << "（预期行为）" << endl;
    }

    try {
        cout << "尝试查看空队列的队首：";
        q.peek();
    } catch (const std::underflow_error& e) {
        cout << "捕获异常：" << e.what() << "（预期行为）" << endl;
    }

    // 测试7：混合操作
    cout << endl << "测试7：混合操作" << endl;
    q.push(40);
    q.push(50);
    cout << "入队元素：40, 50" << endl;
    cout << "出队元素：" << q.pop() << "（预期：40）" << endl;
    q.push(60);
    cout << "入队元素：60" << endl;
    cout << "出队元素：" << q.pop() << "（预期：50）" << endl;
    cout << "出队元素：" << q.pop() << "（预期：60）" << endl;
    cout << "最终队列是否为空：" << q.empty() << "（预期：1）" << endl;
    return 0;
}
