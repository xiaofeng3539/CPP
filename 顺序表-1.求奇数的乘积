#include<iostream>
using namespace std;

#define eleType int

struct SequentialList {
	eleType* elements;
	int size;
	int capacity;
	
};

// 初始化
void initializeList(SequentialList* list, int capacity) {
	list->elements = new eleType[capacity];
	list->size = 0;
	list->capacity = capacity;
}

void destroyList(SequentialList* list) {
	delete[] list->elements;
}

int size(SequentialList* list) {
	return list->size;
}

bool isEmpty(SequentialList* list) {
	return list->size == 0;
}

void insert(SequentialList* list, int index,eleType element) {
	if (index < 0 || index > list->capacity) {
		throw std::invalid_argument("Invalid index");
	}
	if (list->size == list->capacity) {
		int newcapacity = list->capacity * 2;
		eleType* newElements = new eleType[newcapacity];
		for (int i = 0; i < list->size; ++i) {
			newElements[i] = list->elements[i];
		}
		delete[] list->elements;
		list->elements = newElements;
		list->capacity = newcapacity;
	}
	for (int i = list->size; i > index; --i) {
		list->elements[i] = list->elements[i - 1];
	}
	list->elements[index] = element;
	list->size++;
}

void deleteElement(SequentialList* list, int index) {
	if (index < 0 || index >= list->capacity) {
		throw std::invalid_argument("Invalid index");
	}
	for (int i = index; i < list->size - 1; ++i) {
		list->elements[i] = list->elements[i + 1];
	}
	list->size--;
}

int findelement(SequentialList* list, eleType element) {
	for (int i = 0; i < list->size; ++i) {
		if (list->elements[i] == element) {
			return i;
		}
	}
	return -1;
}

int getlElement(SequentialList* list, int index) {
	if (index < 0 || index >= list->size) {
		throw std::invalid_argument("Invalid index");
	}
	return list->elements[index];
}

void updateElement(SequentialList* list,int index,eleType value) {
	list->elements[index] = value;
}

int main() {
	int n;
	while(cin >> n){
		SequentialList s;
		initializeList(&s,1);
		for(int i = 0;i < n;i++){
			int x;
			cin >> x;
			insert(&s,i,x);
		}
		int prod = 1;
		for(int i = 0;i < n;i++){
			int val = getlElement(&s,i);
			if(val % 2 == 1 ){
				prod *= val;
			}
		}
		cout << prod << endl;
	}
	return 0;
}
