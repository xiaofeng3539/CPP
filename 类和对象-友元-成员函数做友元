#include <iostream>
using namespace std;

// 先声明 Building 类（前向声明）
class Building;

class GoodGay {
public:
	GoodGay();
	void visit();   // 访问公有成员
	void visit2();  // 访问私有成员
	
	Building* building;
};

class Building {
	// 让 GoodGay 成为友元类，访问私有成员
	friend void GoodGay::visit();
	
public:
	Building();
	string m_SittingRoom;
	
private:
	string m_BedRoom;
};

// 类外实现 Building 构造函数
Building::Building() {
	m_SittingRoom = "客厅";
	m_BedRoom = "卧室";
}

// 类外实现 GoodGay 构造函数
GoodGay::GoodGay() {
	building = new Building;
}

void GoodGay::visit() {
	cout << "visit函数正在访问：" << building->m_SittingRoom<< endl;
	cout << "visit函数正在偷偷访问：" << building->m_BedRoom << endl;
}

void GoodGay::visit2() {
	cout << "visit2函数正在访问：" << building->m_SittingRoom<< endl;
	//cout << "visit2函数正在偷偷访问：" << building->m_BedRoom << endl;
}

void test01() {
	GoodGay gg;
	gg.visit();   // 访问公有成员
	gg.visit2();  // 访问私有成员（因为是友元）
}

int main() {
	test01();
	return 0;
}
